# Generated by Django 5.2.7 on 2025-10-30 14:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import kursy.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseEdition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nazwa edycji kursu (np. '2025/26 Semestr 2').", max_length=255, unique=True, verbose_name='Nazwa edycji')),
            ],
            options={
                'verbose_name': 'Edycja kursu',
                'verbose_name_plural': 'Edycje kursów',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_instructor', models.BooleanField(default=False, help_text='Oznacza, czy użytkownik jest prowadzącym kursy.', verbose_name='Prowadzący')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Użytkownik',
                'verbose_name_plural': 'Użytkownicy',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nazwa kursu.', max_length=255, verbose_name='Nazwa kursu')),
                ('description', models.TextField(help_text='Szczegółowy opis kursu.', verbose_name='Opis kursu')),
                ('is_visible', models.BooleanField(db_index=True, default=False, help_text='Czy kurs jest widoczny dla wszystkich użytkowników.', verbose_name='Widoczny publicznie')),
                ('instructor', models.ForeignKey(help_text='Prowadzący kurs.', limit_choices_to={'is_instructor': True}, on_delete=django.db.models.deletion.PROTECT, related_name='courses', to=settings.AUTH_USER_MODEL, verbose_name='Prowadzący')),
                ('edition', models.ForeignKey(help_text='Edycja/semestr, do którego należy kurs.', on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='kursy.courseedition', verbose_name='Edycja kursu')),
            ],
            options={
                'verbose_name': 'Kurs',
                'verbose_name_plural': 'Kursy',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Tytuł lekcji.', max_length=255, verbose_name='Tytuł lekcji')),
                ('description', models.TextField(help_text='Szczegółowy opis lekcji.', verbose_name='Opis lekcji')),
                ('is_published', models.BooleanField(db_index=True, default=False, help_text='Czy lekcja jest opublikowana i dostępna dla studentów.', verbose_name='Opublikowana')),
                ('course', models.ForeignKey(help_text='Kurs, do którego należy lekcja.', on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='kursy.course', verbose_name='Kurs')),
            ],
            options={
                'verbose_name': 'Lekcja',
                'verbose_name_plural': 'Lekcje',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Ścieżka do pliku na serwerze.', upload_to=kursy.models.lesson_attachment_path, verbose_name='Plik')),
                ('original_filename', models.CharField(help_text='Oryginalna nazwa pliku przesłanego przez użytkownika.', max_length=255, verbose_name='Oryginalna nazwa pliku')),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Liczba pobrań pliku.', verbose_name='Liczba pobrań')),
                ('lesson', models.ForeignKey(help_text='Lekcja, do której należy załącznik.', on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='kursy.lesson', verbose_name='Lekcja')),
            ],
            options={
                'verbose_name': 'Załącznik',
                'verbose_name_plural': 'Załączniki',
                'ordering': ['original_filename'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Oczekujący'), ('approved', 'Zatwierdzony'), ('rejected', 'Odrzucony')], db_index=True, default='pending', help_text='Status zapisu na kurs.', max_length=10, verbose_name='Status zapisu')),
                ('course', models.ForeignKey(help_text='Kurs, na który student się zapisuje.', on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='kursy.course', verbose_name='Kurs')),
                ('student', models.ForeignKey(help_text='Student zapisany na kurs.', limit_choices_to={'is_instructor': False}, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL, verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Zapis na kurs',
                'verbose_name_plural': 'Zapisy na kursy',
                'ordering': ['-id'],
                'unique_together': {('student', 'course')},
            },
        ),
    ]
